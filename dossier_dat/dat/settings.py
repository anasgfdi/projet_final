"""
Django settings for visage project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4y6y$^6&@3v=j+hgt@3d^75l&po-%w)2ljr4-5*_ne)-hxu5dh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'service',
    'api_app',
    'crispy_forms',
    'signup',
    'widget_tweaks',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'visage.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR /"templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'visage.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    'detection_images': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join('/home/apprenant/Documents/projet_final/dossier_image_detection', 'entrainement.db'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [     BASE_DIR / "static", ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'home'

from pathlib import Path
import logging
import shutil
import datetime

# Définir le répertoire de sauvegarde des logs
LOGS_DIR = os.path.join(BASE_DIR, 'logs')

# Créer le répertoire s'il n'existe pas
os.makedirs(LOGS_DIR, exist_ok=True)

# Définir le format des logs
LOG_FORMAT = '%(asctime)s [%(levelname)s] %(message)s'

# Obtenir le chemin complet du fichier de log
LOG_FILE = os.path.join(LOGS_DIR, 'lasted.log')

# Renommer l'ancien fichier de log avec la date
if os.path.exists(LOG_FILE):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    new_log_file = os.path.join(LOGS_DIR, f'debug_{timestamp}.log')
    shutil.move(LOG_FILE, new_log_file)

# Configurer le logger pour enregistrer les logs dans le fichier
logging.basicConfig(
    level=logging.DEBUG,
    format=LOG_FORMAT,
    filename=LOG_FILE,
)

# Ajouter un handler de console pour afficher les logs dans la console également
logging.getLogger().addHandler(logging.StreamHandler())